buildscript {
    repositories {
        mavenLocal() //for local testing of mockito-release-tools
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.4.4' //for 'java-compatibility-check.gradle'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.15'
        classpath 'https://mvnrepository.com/artifact/junit/junit'
        //Using buildscript.classpath so that we can resolve shipkit from maven local, during local testing
        classpath 'org.shipkit:shipkit:2.0.28'
    }
}

plugins {
    id 'java'
}

group 'mockito.base'
version '2.23.3'

sourceCompatibility = 1.9
targetCompatibility = 1.9

dependencies{
    compile libraries.bytebuddy, libraries.bytebuddyagent
    compileOnly libraries.junit4, libraries.hamcrest
    compile libraries.objenesis

    testCompile libraries.asm

    testCompile libraries.assertj

    //putting 'provided' dependencies on test compile and runtime classpath
    testCompileOnly configurations.compileOnly
    testRuntime configurations.compileOnly

    //testUtil sourceSets.test.output
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
    }
}
compileJava{
    doFirst {
        options.fork = true
        // options.forkOptions.javaHome = file('C:/Program Files/Java/jdk-9')
        options.sourcepath = files(sourceSets.main.java.srcDirs)
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

/*compileJava.options.fork = true
compileJava {
    inputs.property("moduleName", 'mockito.base')
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()  
    }
}
*/
compileTestJava {
    inputs.property("moduleName", 'mockito.base')
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'junit',  // <2>
            '--add-reads', "$moduleName=junit", 
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath, // <4>
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", 'mockito.base')
    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath, // <1>
            '--add-modules', 'ALL-MODULE-PATH', // <2>
            '--add-reads', "$moduleName=junit", // <3>
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath, // <4>
        ]
        classpath = files()
    }
}

ext.moduleName = 'mockito.base'
